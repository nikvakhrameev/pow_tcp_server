// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pow "github.com/nikvakhrameev/pow_tcp_server/internal/pow"
	mock "github.com/stretchr/testify/mock"
)

// PowChallengeSolver is an autogenerated mock type for the PowChallengeSolver type
type PowChallengeSolver struct {
	mock.Mock
}

// SolvePowChallenge provides a mock function with given fields: ctx, _a1
func (_m *PowChallengeSolver) SolvePowChallenge(ctx context.Context, _a1 pow.Challenge) (uint64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pow.Challenge) (uint64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pow.Challenge) uint64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pow.Challenge) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPowChallengeSolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewPowChallengeSolver creates a new instance of PowChallengeSolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPowChallengeSolver(t mockConstructorTestingTNewPowChallengeSolver) *PowChallengeSolver {
	mock := &PowChallengeSolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
